//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Golf"",
            ""id"": ""5a34bc87-39de-4f6c-a088-9472a02ab757"",
            ""actions"": [
                {
                    ""name"": ""AimX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5c3279b3-71d7-4f16-8484-2107ff07397f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Anticipate"",
                    ""type"": ""Button"",
                    ""id"": ""fea7a8ba-511a-4b1d-b9f2-f1d7d286f055"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Q/E"",
                    ""id"": ""d258729a-c9f3-40df-899f-93e217abb9a1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimX"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""24984f03-f6df-45bb-a2f2-8f1766f741ef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""AimX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9c839f0a-41a9-4e7f-b1e1-8cf62f059810"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""AimX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""e1d2748d-69c6-42b7-b9d6-0f726c0531fa"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimX"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""352a6931-cecb-4583-99cf-6bb86f87523d"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""AimX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9b1d5203-a24a-44ec-9659-f888280cd819"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""AimX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""58dcc9cf-4670-43da-8b70-a5810587c4eb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Anticipate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3295c503-a01e-49ce-b277-04f0a588de04"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Anticipate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": []
        }
    ]
}");
        // Golf
        m_Golf = asset.FindActionMap("Golf", throwIfNotFound: true);
        m_Golf_AimX = m_Golf.FindAction("AimX", throwIfNotFound: true);
        m_Golf_Anticipate = m_Golf.FindAction("Anticipate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Golf
    private readonly InputActionMap m_Golf;
    private List<IGolfActions> m_GolfActionsCallbackInterfaces = new List<IGolfActions>();
    private readonly InputAction m_Golf_AimX;
    private readonly InputAction m_Golf_Anticipate;
    public struct GolfActions
    {
        private @PlayerControls m_Wrapper;
        public GolfActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @AimX => m_Wrapper.m_Golf_AimX;
        public InputAction @Anticipate => m_Wrapper.m_Golf_Anticipate;
        public InputActionMap Get() { return m_Wrapper.m_Golf; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GolfActions set) { return set.Get(); }
        public void AddCallbacks(IGolfActions instance)
        {
            if (instance == null || m_Wrapper.m_GolfActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GolfActionsCallbackInterfaces.Add(instance);
            @AimX.started += instance.OnAimX;
            @AimX.performed += instance.OnAimX;
            @AimX.canceled += instance.OnAimX;
            @Anticipate.started += instance.OnAnticipate;
            @Anticipate.performed += instance.OnAnticipate;
            @Anticipate.canceled += instance.OnAnticipate;
        }

        private void UnregisterCallbacks(IGolfActions instance)
        {
            @AimX.started -= instance.OnAimX;
            @AimX.performed -= instance.OnAimX;
            @AimX.canceled -= instance.OnAimX;
            @Anticipate.started -= instance.OnAnticipate;
            @Anticipate.performed -= instance.OnAnticipate;
            @Anticipate.canceled -= instance.OnAnticipate;
        }

        public void RemoveCallbacks(IGolfActions instance)
        {
            if (m_Wrapper.m_GolfActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGolfActions instance)
        {
            foreach (var item in m_Wrapper.m_GolfActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GolfActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GolfActions @Golf => new GolfActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IGolfActions
    {
        void OnAimX(InputAction.CallbackContext context);
        void OnAnticipate(InputAction.CallbackContext context);
    }
}
